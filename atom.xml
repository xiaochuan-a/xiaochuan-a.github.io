<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>很遗憾对吧</title>
  
  <subtitle>黑暗散尽，月华满天</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-25T09:07:52.112Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>皓曦之月</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动漫头像</title>
    <link href="http://example.com/posts/photo1.html"/>
    <id>http://example.com/posts/photo1.html</id>
    <published>2024-10-25T07:25:14.000Z</published>
    <updated>2024-10-25T09:07:52.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>不定期更新动漫头像～</p></div><p><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202410251534400.png" alt : style="width: 30%; display: inline-block;"><br><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202410251534892.png" alt : style="width: 30%; display: inline-block;"><br><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202410251534383.png" alt : style="width: 30%; display: inline-block;"><br><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202410251534533.png" alt : style="width: 30%; display: inline-block;"><br><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202410251536836.jpg" alt : style="width: 30%; display: inline-block;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="无" scheme="http://example.com/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>不要停下前进的脚步</title>
    <link href="http://example.com/posts/asd2.html"/>
    <id>http://example.com/posts/asd2.html</id>
    <published>2023-07-21T03:25:14.000Z</published>
    <updated>2024-09-27T07:52:24.100Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note primary"><p>2024/03/19 11：11<br> 昨天优化了一段的自己的代码，感觉涉及技术点还是挺多的，在这里记录一下</p></div><p>最近宣贯的一个需求是：如果客户提了一个订单，需要审批人进行一个审批，但是这个审批人在一天内（24 小时）没有审批，我们就需要给审批人发送短信提醒一下，这个需求改造总体涉及三个功能点：<br><span class="kbd red">1：创建定时任务，每天的早上九点执行，检查审批单是否已经超过一天未处理，如果是，记录该审批人需要发送短信提醒</span><br><span class="kbd red"> 2：检查当前时间是否为工作日，需要将当前审批人的信息或者单号记录下来，如果不是工作日就不提醒，直接 return</span><br><span class="kbd red">3：当前审批人下的有多个订单未审批，只需要发送一条短信就行</span><br>首先是我的第一版代码编写思路：<br>（1）：这里首要的判断条件是要先对工作日和非工作日做出一个判断，因为如果不是工作日剩下的代码就不用继续执行了（这里的判断是调用的第三方 API，因为咱们国家的放假太抽象.. 还有调休在里面）<br>（2）：然后要获取到所有的订单，在获取到创建订单的时间，订单审批状态（未审批是 N 审批是 Y）及每个订单下的审批人信息<br>（3）：转换创建时间的时间格式，获取当前时间，进行对比，超过 24 小时执行发送短信逻辑</p><p><figure class="highlight java"><figcaption><span>第一版代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isWorkDayOrNot(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;当前时间为工作日，开始执行定时任务&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">BUSINESS_SERVICE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ABS-BUSINESS-ECLOUD&quot;</span>;</span><br><span class="line">                List&lt;String&gt; phoneList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">//领导手机号集合</span></span><br><span class="line">                <span class="comment">//根据产品编码，是否审批，操作编码(1:新增 4 9免费资源延期 )，获取所有待审批的订单审批单列表</span></span><br><span class="line">                List&lt;AbsTaskItem&gt; absTaskItems = iAbsTaskItemDao.selectTaskItemAndSkuNumByActulStatus();</span><br><span class="line">                <span class="keyword">if</span> (CommonUtil.isNotNullList(absTaskItems)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (AbsTaskItem absTaskItem : absTaskItems) &#123;</span><br><span class="line">                        <span class="type">Date</span> <span class="variable">createTime</span> <span class="operator">=</span> absTaskItem.getCreateTime();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">orderCreateTimeStr</span> <span class="operator">=</span> DateUtil.formatDate2Str(createTime, DateUtil.YYYY_MM_DDHHMMSS);</span><br><span class="line">                        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(DateUtil.YYYY_MM_DDHHMMSS);</span><br><span class="line">                        <span class="type">LocalDateTime</span> <span class="variable">orderCreateDateTime</span> <span class="operator">=</span> LocalDateTime.parse(orderCreateTimeStr, formatter);</span><br><span class="line">                        <span class="comment">//获取时间</span></span><br><span class="line">                        <span class="type">ZonedDateTime</span> <span class="variable">orderCreateTime</span> <span class="operator">=</span> ZonedDateTime.of(orderCreateDateTime, ZoneId.systemDefault());</span><br><span class="line">                        <span class="type">ZonedDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.systemDefault());</span><br><span class="line">                        <span class="comment">//计算时间差</span></span><br><span class="line">                        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(orderCreateTime, currentTime);</span><br><span class="line">                        <span class="keyword">if</span> (duration.toMinutes() &gt; <span class="number">24</span> * <span class="number">60</span>) &#123;</span><br><span class="line">                            <span class="comment">//根据单号去在途表查询属性  1116013001 是否免费测试  0-否 1-是</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">prodOrdSkuNum</span> <span class="operator">=</span> absTaskItem.getProdOrdSkuNum();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">charValue</span> <span class="operator">=</span> iProdistProdordSkuDao.selectProdordSkuNumByProSkuNumAndCharNum(prodOrdSkuNum);</span><br><span class="line">                            <span class="keyword">if</span> (StringUtils.equals(<span class="string">&quot;1&quot;</span>,charValue) &amp;&amp; StringUtils.isNotBlank(charValue)) &#123;</span><br><span class="line">                                <span class="type">String</span> <span class="variable">absTaskId</span> <span class="operator">=</span> absTaskItem.getAbsTaskId();</span><br><span class="line">                                <span class="comment">//获取到ABS_TASK_ID去代办表查询审批人的手机号</span></span><br><span class="line">                                List&lt;String&gt; TaskIdList = taskUserDao.selectPhoneNumByTaskId(absTaskId);</span><br><span class="line">                                phoneList.addAll(TaskIdList);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//手机号去重  每个审批人只发送一次</span></span><br><span class="line">                    List&lt;String&gt; newphoneList = phoneList.stream().distinct().collect(Collectors.toList());</span><br><span class="line">                    log.info(<span class="string">&quot;当前需要发送的审批人集合为:&quot;</span>+JSONObject.toJSONString(newphoneList));</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></p><div class="note danger"><p>敲重点，在昨天重新审视代码的时候发现这段代码有很大问题，因为我忽略了一个东西，就是测试联调和正式生产环境上数据的差异。<br>测试环境可能只能几千条数据，生产有几千万的数据<br>首先这段代码（问题一这段）是查询出来所有的未审批的订单信息，注意，返回的是所有的数据，我们生产上估计有几百万或者几千万的数据，后面还要去循环这个集合<br>每一次的循环的里面还有这种时间转换的对比.... 肯定是不可取的，所以这个里需要做一个优化，思路是这样的<br>我们可以在查询的时候直接加一个对比函数，这个想法我试验过，但是在 mybatis 里面太难实现了，我试了很多中方法，每次要部署一下（本地我的服务有问题跑不起来），无奈放弃<br>所有用了第二种方法，分批去查询数据库中的数据，每一批设定值为 5000 条，定义一个自增的然后需要定义一个自增的变量</p></div><p><figure class="highlight java"><figcaption><span>问题一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;AbsTaskItem&gt; absTaskItems = iAbsTaskItemDao.selectTaskItemAndSkuNumByActulStatus();</span><br><span class="line"><span class="keyword">for</span> (AbsTaskItem absTaskItem : absTaskItems) &#123;</span><br><span class="line">    <span class="comment">//处理逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 调整后的代码整体逻辑是不变的，但是在查询的时候增加了两个值，每次要查询的多少条数据 tchSize 和一个条数定义也叫偏移量 offset<br> 大致可以理解为，假设我们有 500 条数据，我设置了每次查询 100 条和偏移量自增，第一次查询的数据就是 0-100 的数据，第二次由于偏移量自增查询的就是是 100-200 的数据，以此类推<br>这样在查询的时候就可以控制好每次要查询的条数，所以这里写的是 while (true) 死循环，查不到数据直接 break 跳出，下面是优化后的代码</p><p><figure class="highlight java"><figcaption><span>优化后</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (isWorkDayOrNot(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123; <span class="comment">//先对时间做一个判断</span></span><br><span class="line">              log.info(<span class="string">&quot;当前时间为工作日，开始执行定时任务&quot;</span>);</span><br><span class="line">              <span class="comment">//每次需要查询的次数</span></span><br><span class="line">              <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">              <span class="comment">//自增变量</span></span><br><span class="line">              <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                  List&lt;AbsTaskItem&gt; absTaskItems = iAbsTaskItemDao.selectTaskItemAndSkuNumByActulStatus(offset, batchSize);</span><br><span class="line">                  <span class="keyword">if</span> (absTaskItems.isEmpty()) &#123;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">//判断逻辑单独抽成一个方法，每次查询出来的5000条数据去做具体的判断</span></span><br><span class="line">                  processTaskItems(absTaskItems);</span><br><span class="line">                  offset += batchSize;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              log.info(<span class="string">&quot;非工作日，不执行移动云审批人发送短信提醒！&quot;</span>);</span><br><span class="line">              XxlJobLogger.log(<span class="string">&quot;非工作日，不执行移动云审批人发送短信提醒！&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          e.getMessage();</span><br><span class="line">          log.error(<span class="string">&quot; %%%%%%移动云短信通知领导审批人进行审批异常error：&quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//分割线==============================================mybatis逻辑===========================================================</span></span><br><span class="line">      select T.ABS_TASK_ITEM_ID,T.ABS_TASK_ID,PRODORD_SKU_NUM,T.ACTUAL_STATUS,T.ACTUAL_TIME,T.CREATE_TIME,</span><br><span class="line">   T.SLA,T.IS_TIME_OUT,T.TIME_OUT,T.ACTUAL_STAFF,T.OPERATION_SUB_TYPE,T.SKU_NUM,T.SKU_NAME,</span><br><span class="line">   T.PRODORD_SKU_NAME,T.TASK_ID,T.TASK_NAME,T.`ACTION`</span><br><span class="line">from abs_task.abs_task_item T</span><br><span class="line">where T.SKU_NUM = <span class="string">&#x27;111601&#x27;</span></span><br><span class="line">and T.ACTUAL_STATUS = <span class="string">&#x27;N&#x27;</span></span><br><span class="line">and T.OPERATION_SUB_TYPE <span class="title function_">in</span> <span class="params">(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span></span><br><span class="line">order by T.CREATE_TIME ASC</span><br><span class="line">LIMIT #&#123;limit&#125; OFFSET #&#123;offset&#125;</span><br></pre></td></tr></table></figure><br> 解决完这个问题后，第二个问题就是既然每次查询的出来的数据是定量的，但是每次不还是一次一次调用判断的方法吗，后面就想到了用线程池来解决这个问题<br><span class="kbd red"> 1：int cores=Runtime.getRuntime ().availableProcessors ()</span><br><span class="kbd red">2：ExecutorService executor = Executors.newFixedThreadPool(cores * 2);</span><br> 首先第一个点就是为 1 的这行代码，意思就是获取到当前服务的 cpu 核心数，第二点就是创建一个 FixedThreadPool 线程池，其线程大小是（cores * 2）当前核心数的 2 倍，这种写法的好处就是合理利用当前服务器 cpu 的资源信息（我理解的是这样的）当然你也可以直接这么写 Executors.newFixedThreadPool (10); 这种就是直接创建当前线程大小为 10，就不用 cores*2 了，看自己啦～～<br> 献上代码！<br><figure class="highlight java"><figcaption><span>简单的线程池使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTaskItems</span><span class="params">(List&lt;AbsTaskItem&gt; absTaskItems,ConcurrentHashMap&lt;String, Boolean&gt; phoneMap)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间为工作日，开始执行定时任务&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">BUSINESS_SERVICE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ABS-BUSINESS-ECLOUD&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cores</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(cores * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (AbsTaskItem absTaskItem : absTaskItems) &#123;</span><br><span class="line">            executor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="type">Date</span> <span class="variable">createTime</span> <span class="operator">=</span> absTaskItem.getCreateTime();</span><br><span class="line">                <span class="type">String</span> <span class="variable">orderCreateTimeStr</span> <span class="operator">=</span> DateUtil.formatDate2Str(createTime, DateUtil.YYYY_MM_DDHHMMSS);</span><br><span class="line">                <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(DateUtil.YYYY_MM_DDHHMMSS);</span><br><span class="line">                <span class="type">LocalDateTime</span> <span class="variable">orderCreateDateTime</span> <span class="operator">=</span> LocalDateTime.parse(orderCreateTimeStr, formatter);</span><br><span class="line">                <span class="comment">//获取时间</span></span><br><span class="line">                <span class="type">ZonedDateTime</span> <span class="variable">orderCreateTime</span> <span class="operator">=</span> ZonedDateTime.of(orderCreateDateTime, ZoneId.systemDefault());</span><br><span class="line">                <span class="type">ZonedDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.systemDefault());</span><br><span class="line">                <span class="comment">//计算时间差</span></span><br><span class="line">                <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(orderCreateTime, currentTime);</span><br><span class="line">                <span class="keyword">if</span> (duration.toMinutes() &gt; <span class="number">24</span> * <span class="number">60</span>) &#123;</span><br><span class="line">                  <span class="comment">//根据单号去在途表查询属性  1116013001 是否免费测试  0-否 1-是</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">prodOrdSkuNum</span> <span class="operator">=</span> absTaskItem.getProdOrdSkuNum();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">charValue</span> <span class="operator">=</span> iProdistProdordSkuDao.selectProdordSkuNumByProSkuNumAndCharNum(prodOrdSkuNum);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.equals(<span class="string">&quot;1&quot;</span>,charValue) &amp;&amp; StringUtils.isNotBlank(charValue)) &#123;</span><br><span class="line">                        <span class="comment">//获取到ABS_TASK_ID去代办表查询审批人</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">absTaskId</span> <span class="operator">=</span> absTaskItem.getAbsTaskId();</span><br><span class="line">                        List&lt;String&gt; TaskIdList = taskUserDao.selectPhoneNumByTaskId(absTaskId);</span><br><span class="line">                        <span class="keyword">if</span> (CommonUtil.isNotNullList(TaskIdList)) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (String phoneNum : TaskIdList) &#123;</span><br><span class="line">                                phoneMap.put(phoneNum, Boolean.TRUE);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown(); <span class="comment">//关闭启动线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待直到所有任务完成</span></span><br><span class="line">            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br> 最后一个知识点就是第三功能点，<span class="kbd red">3：当前审批人下的有多个订单未审批，只需要发送一条短信就行</span>这里在没有加线程处理数据之前，直接用的是 Arraylist 来存放数据的，加了之后就意识到线程安全的问题，后面就换成线程安全的<span class="kbd red"> ConcurrentHashMap&lt;String, Boolean&gt; phoneMap = new ConcurrentHashMap&lt;&gt;();</span>，使用完记得释放资源，不过后面还遇到了一个问题，作用域的问题<br>反正，额，这个好解决，根据自己的代码在调用 processTaskItems 方法前初始化就好了，然后执行完一定要 phoneMap.clear () 一下，不然小心内存溢出～～下课！！</p><div class="note warning no-icon"><p>我<sub>只</sub>是<sub>一</sub>个<sub>分</sub>割<sub>线</sub>我<sub>只</sub>是<sub>一</sub>个<sub>分</sub>割<sub>线</sub>我<sub>只</sub>是<sub>一</sub>个<sub>分</sub>割<sub>线</sub></p></div><div class="note success  no-icon"><p>stream 流的常见使用方法 (搞笑简洁), 别嘲笑我，反正我是容易忘.....</p></div><p><figure class="highlight java"><figcaption><span>stream流的常见使用方法  参考链接 mark:1,6-7</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数据通过stream流转换成key value的形式，使用的场景很多，取值得话直接根据产品编码Key获取就行</span></span><br><span class="line">HashMap&lt;String, String&gt; prodistCollect = prodistCharacters.stream()</span><br><span class="line">                        .collect(HashMap::<span class="keyword">new</span>, (x, item)-&gt; x.put(item.getCharNum(),item.getCharValue()),HashMap::putAll);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> prodistCollect.get(BusinessConstants.Character.PRODUCT_NUMBER_92023660001);</span><br><span class="line">逻辑判断...</span><br><span class="line">逻辑判断...</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是产品的属性是有特殊的规则，比如成对出现的这种（0和1）我们就可以用stream流中的groupingBy方法来进行一个分组</span></span><br><span class="line">Map&lt;String, List&lt;ProdordCharacter&gt;&gt; listMap = prodordCharacters.stream().collect(Collectors.</span><br><span class="line">(ProdordCharacter::getAction));</span><br><span class="line"><span class="comment">//根据Action0和1进行分组</span></span><br><span class="line">List&lt;ProdordCharacter&gt; prodordCharacters0 = listMap.get(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">List&lt;ProdordCharacter&gt; prodordCharacters1 = listMap.get(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//获取所有的Action0和1属性组</span></span><br><span class="line">HashMap&lt;String, String&gt; map0 = prodordCharacters0.stream().collect(HashMap&lt;String, String&gt;::<span class="keyword">new</span>, (x, item) -&gt; x.put(item.getCharNum(), item.getCharValue()), HashMap::putAll);</span><br><span class="line">HashMap&lt;String, String&gt; map1 = prodordCharacters1.stream().collect(HashMap&lt;String, String&gt;::<span class="keyword">new</span>, (x, item) -&gt; x.put(item.getCharNum(), item.getCharValue()), HashMap::putAll);</span><br><span class="line">（通过map0和map1获取值来进行逻辑判断.....）</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过stream流里面的filter进行过滤，获取到指定产品编码的值，下面就是通过filter获取到30037属性的值，如果没有值则复制为空字符串</span></span><br><span class="line"><span class="comment">//对这个方法的返回值进行操作的时候要记得用StringUtils.isNotBlank()或者别的判空来做一个非空判断，不然可能会报转换异常</span></span><br><span class="line"><span class="type">String</span> <span class="variable">icbVal</span> <span class="operator">=</span> prodordTemplates.getProdordIcbs().stream()</span><br><span class="line">                        .filter(prodordIcbs -&gt; BusinessConstants.Icb.ICB_30037.equals(prodordIcbs.getParameterNum()))</span><br><span class="line">                        .map(ProdordIcbs::getParameterValue)</span><br><span class="line">                        .findFirst()</span><br><span class="line">                        .orElse(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还有一种方法获取到指定产品编码的值，跟上面这种一样的方法进行过滤，但是最终返回值的类型不一样 </span></span><br><span class="line">Optional&lt;ProdordCharacters&gt; siteNumOptional = prodordCharactersList.stream().filter(x -&gt; BusinessConstants.Character.ICB_30037.equals(x.getCharNum())).findFirst();</span><br><span class="line"><span class="keyword">if</span> (siteNumOptional.isPresent()) &#123;</span><br><span class="line">    <span class="type">ProdordCharacters</span> <span class="variable">siteNumCharacters</span> <span class="operator">=</span> siteNumOptional.get();</span><br><span class="line">    <span class="type">String</span> <span class="variable">charValue</span> <span class="operator">=</span> siteNumCharacters.getCharValue();</span><br><span class="line">    逻辑判断...</span><br><span class="line">    逻辑判断...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到这个属性具体字段的值，不然我这个返回的就是一个list</span></span><br><span class="line"><span class="type">String</span> <span class="variable">templateNum</span> <span class="operator">=</span> queryProdistSkuInfoRsp.getProdistTemplates()</span><br><span class="line">        .stream()</span><br><span class="line">        .map(ProdistTemplateDto::getTemplateNum)</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//将list集合转换成对象（如果明确只有一组数据的话 不然会出问题）</span></span><br><span class="line">List&lt;ProdordTemplates&gt; prodordTemplate = prodordSkus.getProdordTemplate();</span><br><span class="line"><span class="type">ProdordTemplates</span> <span class="variable">prodordTemplates1</span> <span class="operator">=</span> prodordTemplate.stream().findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//判断这个对象是否为空</span></span><br><span class="line">Optional&lt;ProdordTemplates&gt; optionalTemplates = Optional.ofNullable(prodordTemplates1);</span><br><span class="line"><span class="keyword">if</span> (optionalTemplates.isPresent()) &#123;</span><br><span class="line">    <span class="comment">// 对象不为空的处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(templateNum)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rateTmplByTemplateNum</span> <span class="operator">=</span> callProductServiceClient.getRateTmplByTemplateNum(templateNum);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">rateresult</span> <span class="operator">=</span> JSONObject.parseObject(rateTmplByTemplateNum);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ratebizCode</span> <span class="operator">=</span> rateresult.getString(<span class="string">&quot;bizCode&quot;</span>);</span><br><span class="line">        <span class="type">PcRateTmpl</span> <span class="variable">pcRateTmpl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;00000&quot;</span>.equals(ratebizCode)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">datarate</span> <span class="operator">=</span> rateresult.getString(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (com.bboss.common.util.StringUtils.isNotBlank(datarate)) &#123;</span><br><span class="line">                pcRateTmpl = JSONObject.parseObject(datarate, PcRateTmpl.class);</span><br><span class="line">                <span class="comment">//直接get返回的就是一个对象</span></span><br><span class="line">                <span class="type">ProdordTemplates</span> <span class="variable">prodordTemplates</span> <span class="operator">=</span> optionalTemplates.get();</span><br><span class="line">                <span class="keyword">if</span> ((pcRateTmpl.getNote().equals(<span class="string">&quot;M&quot;</span>) &amp;&amp; prodordTemplates.getNote().equals(<span class="string">&quot;F&quot;</span>)) </span><br><span class="line">                || (pcRateTmpl.getNote().equals(<span class="string">&quot;F&quot;</span>) &amp;&amp; prodordTemplates.getNote().equals(<span class="string">&quot;M&quot;</span>))) &#123;</span><br><span class="line">                    errMsg = String.format(<span class="string">&quot;当前套餐：[%s]，不支持包年包月互转!&quot;</span>,templateNum);</span><br><span class="line">                    log.error(errMsg);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(errMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><div class="note info"><p>简单的试一下这个代码块功能，下面代码其实很 low，看个乐呵就好，不必研究╰(<em>°▽°</em>)╯（不知道我在自言自语什么）</p></div><p><figure class="highlight java"><figcaption><span>解析JSON取值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//下面只是一个示例</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;check\&quot;:\&quot;[&#x27;1=&gt;-1&#x27;,&#x27;2=&gt;0|1|2|3|4|5&#x27;]\&quot;,\&quot;target\&quot;:\&quot;sjfl\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span>JSONObject.parseObject(a);</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> jsonObject.get(<span class="string">&quot;target&quot;</span>).toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">target1</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;target&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">check</span> <span class="operator">=</span> jsonObject.get(<span class="string">&quot;check&quot;</span>).toString();</span><br><span class="line">ArrayList&lt;String&gt; arrayList = JSON.parseObject(check, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ArrayList&lt;String&gt;&gt;() &#123;&#125;);</span><br><span class="line"><span class="keyword">for</span> (String s : arrayList) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数组得值&quot;</span>+s);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="读书" scheme="http://example.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>测试记录案例</title>
    <link href="http://example.com/posts/asd1.html"/>
    <id>http://example.com/posts/asd1.html</id>
    <published>2023-07-20T11:25:14.000Z</published>
    <updated>2024-09-27T07:52:24.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default"><p>后续测试都会在这里面进行，一些奇怪的功能完善这个帖子就不再了呢<br> 2023/08/24 11：59 更新：<br>最近真的好忙，忙到每天晚上都是一点钟睡觉<br>因为最近我还要学习 PR,AE 巴拉巴拉的，而且最近真的太忙了<br> emmm 所以就先不搞这个网页了，但是我不会忘记的，这是我最珍视的💕<br>回见回见～</p></div><div class="note primary"><p>基本基本</p></div><div class="note info"><p>提示提示</p></div><div class="note success no-icon"><p>成功成功</p></div><div class="note success"><p>成功成功</p></div><div class="note warning"><p>警告警告</p></div><div class="note danger"><p>危险危险</p></div><div class="note danger no-icon"><p>危险危险</p></div><div class="note warning"><p>==<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark> 我只是一个分割线，我只是一个分割线</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></p></div><p><span class="label">我是默认的标签卡</span><br><span class="label primary"> “铃芽，好痛”“都说了很痛了，铃芽”“你不喜欢吗，不喜欢大臣吗”“铃芽，不喜欢大臣啊”</span><br><span class="label info"> 当记忆消散，黑暗将你环绕时，就抓住你心底的力量</span><br><span class="label success">✔️没错我是个对号＜（＾－＾）＞</span><br><span class="label warning">警告警告警告</span><br><span class="label danger">💔danger</span></p><div class="note warning"><p>==<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark> 我只是一个分割线，我只是一个分割线</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></p></div><ul class="task-list danger"><li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> 这是一个小叉叉</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> 这是一个红色勾勾</label></li></ul><ul class="task-list primary"><li class="task-list-item"><input type="checkbox" id="cbx_2" disabled="true"><label for="cbx_2"> 未完成</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true"><label for="cbx_3"> 完成</label></li></ul><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true"><label for="cbx_4"> 未完成</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked="true" disabled="true"><label for="cbx_5"> 默认颜色</label></li></ul><p><span class="red">人们追随星星，星星追随什么呢</span><br><span class="pink">最大的悲剧就是眼看悲剧发生却无能无力</span><br><span class="orange">夜晚越黑暗，星星就越明亮</span><br><span class="yellow">恐惧是一副沉重的枷锁，猎人必须步伐轻盈身手敏捷</span><br><span class="green">何以与君识，无言泪千行</span><br><span class="aqua">愤怒于我没有意义，只是一道不断溃烂的伤口而已</span><br><span class="blue">想象有这样一个地方，永远是黑夜，而你不肯放弃期待，那永远不会到来的黎明。我不用想象，我去过那</span><br><span class="purple">天命！主宰！欺诈！</span><br><span class="grey">世界既不黑也不白，而是一道精致的灰</span><br><span class="blue">泪到尽头，声声泣血，亦步亦趋，同生共体，暗夜生光，月涌天河，一念一动，天人永隔，黑暗落尽，月华满天</span></p><div class="note info"><p>以下是折叠标签卡的使用方式</p></div><details><summary>默认默认 这里是一段文字</summary><div><p>++ 下划线 ++</p></div></details><details class="primary"><summary>紫色</summary><div><div class="note info"><p>参考信息</p></div><ul><li>第一行</li><li>第二行</li></ul></div></details><details class="warning"><summary>黄色</summary><div><p>!! 警告警告警告警告警告！！{.bulr}<br><span class="label success">label</span></p></div></details><details class="danger"><summary>红色</summary><div><p><span class="label danger">danger</span></p></div></details><div class="note info"><p>以下是表情的使用方式</p></div><p>😘<br>💍<br>🎶<br>💕</p><div class="note primary"><p>试一下标签卡里面可以不可以展示 GIF 动态图片，嘿嘿嘿 (●ˇ∀ˇ●)</p></div><details class="info"><summary>蓝色</summary><div><div class="tab" data-id="id2" data-title="Tom会嘲笑你"><p><img data-src="https://s1.locimg.com/2023/07/21/bc4651b5497c9.gif" alt></p></div><div class="tab" data-id="id2" data-title="宵宫我老婆！"><p><img data-src="https://s1.locimg.com/2023/07/21/24392f342afee.gif" alt></p></div></div></details>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="无" scheme="http://example.com/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>这个里面是图片哦</title>
    <link href="http://example.com/posts/asd.html"/>
    <id>http://example.com/posts/asd.html</id>
    <published>2022-09-04T11:25:14.000Z</published>
    <updated>2024-09-23T08:48:23.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://s1.locimg.com/2023/07/17/00c6b927479f0.jpg" alt><br><img data-src="https://s2.loli.net/2023/07/19/LElFxSDsYmKqGvN.jpg" alt><br><img data-src="https://s2.loli.net/2023/07/19/Gfy4Z52qPis1Vzr.jpg" alt><br><img data-src="https://s2.loli.net/2023/07/19/ZYApErVO5NSvkcd.png" alt><br><img data-src="https://s2.loli.net/2023/07/19/mJFHNE5YayrdnqS.jpg" alt><br><img data-src="https://s2.loli.net/2023/07/19/JTR3sdXcQF5bLjy.jpg" alt><br><img data-src="https://hexo-sakura.oss-cn-beijing.aliyuncs.com/202409231644977.jpg" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="无" scheme="http://example.com/tags/%E6%97%A0/"/>
    
  </entry>
  
</feed>
